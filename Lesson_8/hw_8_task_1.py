# Задание № 1
# Определение количества различных подстрок с использованием хеш-функции. Пусть на вход функции дана строка.
# Требуется вернуть количество различных подстрок в этой строке.
# Примечание: в сумму не включаем пустую строку и строку целиком.

# Надеюсь правильно понял условие задачи. Использовал буфер(массив) содержащий изначально хэш пробела и всей строки
# для исключения их по условию. Далее перебирая подстроки и вычисляя хэш для каждого варианта добавляю в буфер если
# нет совпадений. Интересная задачка если я не ошибся с реализацией
import hashlib

def my_hash(line):
    buf = []
    buf.append(hashlib.sha1(' '.encode('utf-8')).hexdigest())
    buf.append(hashlib.sha1(line.encode('utf-8')).hexdigest())
    n = 0
    while n <= len(line):
        for i in range(n, len(line)):
            # print(line[n:i+1])                                        Для проверки и отображения подстрок можно раскоментировать
            i = hashlib.sha1(line[n:i+1].encode('utf-8')).hexdigest()
            if i not in buf:
                buf.append(i)
        n += 1
    return f'Число подстрок в данной строке -> {(len(buf)-2)}'

ln = input('Введите строку: ')
print(my_hash(ln))
